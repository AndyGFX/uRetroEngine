
## DISPLAY

	Display:TargetFrameRate(fps) - set and lock FPS to defined value        
	Display:Width() - return screen width
	Display:Height() - return screen height
	Display:Flip() - flip backbuffer to VRAM
	Display:Clear() - clear screen
	Display:Clear(color) - clear screen with defined color id
	Display:Clip(x, y, width, height) - Set clipping screen size
	Display:PixelSize(size) - set pixel size (1,2,4)

    
## SPRITES
	
	Sprites:DrawSprite(ID, x, y, flipX, flipY) - Draw sprite ID at [x,y]
	Sprites:SetPixel(ID, x, y, colorID) - Set pixel in sprite at [x,y] to color id
	Sprites:GetPixel(ID, x, y, colorID) - Get pixel color in sprite at [x,y]
	Sprites:Store(ID) - store pixels data of sprite table (internal copy of sprite)
	Sprites:Restore(ID) -  restore pixels data back to sprite table
	Sprites:FlipSprite(ID, flipY, flipY) - Flip sprite in sprite table

## GRAPHICS

	Graphics:PutPixel(x, y, color) - Put pixel to screen
	Graphics:GetPixelx, y) - Get color id from screen at x,y
	Graphics:DrawLine(x1, y1, x2, y2, color) - Draw line to screen in defined color
	Graphics:DrawCircle(x0, y0, radius, color, filled) - Draw circle
	Graphics:DrawRectangle(x0, y0, x1, y1, color, filled) - Draw rectangle

## TEXT

	Text:Draw(x, y, text) - draw text at x,y
	Text:Draw(x, y, text, fontColor, backgroundColor) - draw text at x,y

## SOUND_FX (http://www.bfxr.net/)

	Sound:Add(name, definition, cache) - add sounf fx definition to SFX list
	Sound:Remove(string name) - remove sfx from list
	Sound:Play(name) - play sfx
	Sound:Stop(name) - stop play sfx

## COLOR

	Colors:Set(ID, r, g, b, a) -  set color ID by RGBA valyes
	Colors:Get(ID) - get color from palette at idx ID as Color32 type
	Colors:GetAsHex(ID) - get color from palette at ID as HEX string (retrun color in format #ffrrggbb)
	Colors:SetFromHex(id, hexColor) - set color in palette at ID ( #ffrrggbb/ffrrggbb)

## SYSTEM

	System:ShowFPS(state) - show FPS and redering performance graph CPU/GPU
	System:TimeSinceStart()  - retrun time from app start

## TILEMAP

	Tilemap:Width() - return tilemap width in cells count
	Tilemap:Height() - return tilemap height in cells count
	Tilemap:LayersCount() -  Return layers count in tilemap
	Tilemap:Create(int w, int h) - Create tilemat with defined size
	Tilemap:SetTile(layer, x, y, spriteID, flag, flipX, flipY) - Set tile and tile properties in map
	Tilemap:DrawTilemap(tx, ty, tw, th, sx, sy, maskColor, scale) - Draw tilemap with all layers at once

        	tx - x cell postion</param>
        	ty - y cell postion</param>
	        tw - width cels count </param>
	        th - height cels count</param>
	        sx - at screen x position</param>
	        sy -at screen y position</param>
        	maskColor- mask color ID (unuported now, ID with alpha=0 is used)</param>
        	scale - unsused, insted use Display:PixelSize(<1/2/4>)</param>

	Tilemap:DrawLayer(layer, tx, ty, tw, th, sx, sy, maskColor, scale) Draw tilemap layer
		layer - target layer id
        	tx - x cell postion</param>
        	ty - y cell postion</param>
	        tw - width cels count </param>
	        th - height cels count</param>
	        sx - at screen x position</param>
	        sy -at screen y position</param>
        	maskColor- mask color ID (unuported now, ID with alpha=0 is used)</param>
        	scale - unsused, insted use Display:PixelSize(<1/2/4>)</param>

	Tilemap:GetTileID(layer, x, y) -  get tile ID
	Tilemap:GetTileFlag(layer, x, y) - get tile flag
	Tilemap:ImportTilemap(filename) - Import PyxelEdit exported tilemap (exported PyxelEdit tilemap in json format)
	Tilemap:ImportCollisionMap(filename, flags[], targetLayerID) - import PyxelEdit tilemap as collision map, then is converted to flags on tiles

		filename - name of exported PyxelEdit tilemap in json format</param>
		flags - array of defined tile substitution to flags (0..10) values are preddefined </param>

			FLAG_FREE = 0;
			FLAG_WALL = 1;
			FLAG_OBSTACLE = 2;
			FLAG_LADDER = 3;
			FLAG_HAZARD = 4;
			FLAG_CHEST = 5;
			FLAG_ITEM = 6;
			FLAG_COIN = 7;
			FLAG_LIFE = 8;

		targetLayerID - target layer id

	Tilemap:Save() -  save modified tilemap to game folder (uRe_Tilemap.json)
	Tilemap:Load() -  load tilemap from expanded cartridge (uRe_Tilemap.json)

## UTILS

	not yet implemented

## CONSOLE

	Console: Show() - show console from code
	Console:Hide() - hide opened console from code
	Console:SwitchVisibility() -  open/close console from code, depend on actual state
	Console:Print(text) - print string value to console
	Console:Clear()  - clear console

## INPUT

	Input:ButtonDown(KeyCode) - Check key button DOWN event
	Input:ButtonPressed(KeyCode) - Check key button HOLD event
	Input:ButtonUp(KeyCode) - Check key button UP event
	Input:MouseX() - return x mouse position
	Input:MouseY() - return y mouse position
	Input:MouseButtonDown(id) - Check mouse button DOWN event
	Input:MouseButtonHold(id) - Check mouse button HOLD event
	Input:MouseButtonUp(id) - Check mouse button UP event
	Input:IsInside() - check if mouse pointer is inside active window

## GAMEDATA
	
	GameData:SetInt(name, value) - Set integer value with defined name
	GameData:GetInt(name) - Get int value from variable name
	GameData:SetFloat(name,value) - Set float value with defined name
	GameData:GetFloat(name) - Get float value from variable name
	GameData:SetString(name, value) - Set string value with defined name
	GameData:GetString(name) - Get string value from variable name
	GameData:Save() - Save game data in json format to uRetroEngine persistent data path with name <cartridgename.gamedata>
	GameData:Load() - Load game data in json format to uRetroEngine from persistent data path with name <cartridgename>.gamedata
